import fs from "fs";

let headPos: number[][] = [[0, 0]];
let tailPos: number[][] = [[0, 0]];

function findDistance(pos1: number[], pos2: number[]): number {
  return Math.sqrt(
    Math.pow(pos2[0] - pos1[0], 2) + Math.pow(pos2[1] - pos1[1], 2)
  );
}

function iterateMoves(
  steps: number,
  cb1: (n: number) => number,
  cb2: (n: number) => number,
  cb3: (n: number) => number,
  cb4: (n: number) => number
): void {
  let newHeadPos: number[];
  let newTailPos: number[];

  for (let i = 0; i < steps; i++) {
    let curHeadPos: number[] = headPos[headPos.length - 1];
    let curTailPos: number[] = tailPos[tailPos.length - 1];
    newHeadPos = [cb1(curHeadPos[0]), cb2(curHeadPos[1])];
    headPos.push(newHeadPos);
    const dist = findDistance(newHeadPos, curTailPos);
    if (dist > Math.sqrt(2)) {
      newTailPos = [cb3(newHeadPos[0]), cb4(newHeadPos[1])];
      tailPos.push(newTailPos);
    }
  }
}

function process(instns: string[]): void {
  for (let instn of instns) {
    const parts: string[] = instn.split(" ");
    const dir: string = parts[0];
    const steps: number = parseInt(parts[1], 10);

    switch (dir) {
      case "R":
        iterateMoves(
          steps,
          (j: number) => j + 1,
          (j: number) => j,
          (j: number) => j - 1,
          (j: number) => j
        );
        break;
      case "L":
        iterateMoves(
          steps,
          (j: number) => j - 1,
          (j: number) => j,
          (j: number) => j + 1,
          (j: number) => j
        );
        break;
      case "U":
        iterateMoves(
          steps,
          (j: number) => j,
          (j: number) => j + 1,
          (j: number) => j,
          (j: number) => j - 1
        );
        break;
      case "D":
        iterateMoves(
          steps,
          (j: number) => j,
          (j: number) => j - 1,
          (j: number) => j,
          (j: number) => j + 1
        );
        break;
    }
  }
}

const instns: string[] = fs.readFileSync("input_day9.txt", "utf8").split("\n");
process(instns);

console.log(tailPos.length);

console.log(
  tailPos
    .map((j) => JSON.stringify(j))
    .filter((el, i, arr) => i === arr.indexOf(el))
    .map((k) => JSON.parse(k))
);
